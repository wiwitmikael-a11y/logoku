// Â© 2024 Atharrazka Core by Rangga.P.H. All Rights Reserved.

import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';
import type { Project, ProjectData } from '../types';
import Button from './common/Button';
import Card from './common/Card';
import ImageModal from './common/ImageModal';
import CopyButton from './common/CopyButton';
import LoadingMessage from './common/LoadingMessage';

interface Props {
  project: Project;
  onStartNew: () => void;
  onGoToCaptionGenerator: (projectId: number) => void;
  onGoToInstantContent: (projectId: number) => void;
  onDeleteProject: (projectId: number) => void;
  onRegenerateContentCalendar: () => Promise<void>;
  onRegenerateSocialKit: () => Promise<void>;
  onRegenerateProfiles: () => Promise<void>;
  onRegenerateSocialAds: () => Promise<void>;
  onRegeneratePackaging: () => Promise<void>;
  onRegeneratePrintMedia: (mediaType: 'banner' | 'roll_banner') => Promise<void>;
  onRegenerateMerchandise: () => Promise<void>;
  onShareToForum: (project: Project) => void;
}

const RegenerateButton: React.FC<{ assetKey: string; isRegenerating: boolean; onRegen: () => void; regenText: string; defaultText: string; cost: number;}> = ({ assetKey, isRegenerating, onRegen, regenText, defaultText, cost }) => (
    <Button size="small" variant="secondary" onClick={onRegen} isLoading={isRegenerating}>
        {isRegenerating ? regenText : `${defaultText} (${cost} Token)`}
    </Button>
);

const PdfContent: React.FC<{ projectData: Partial<ProjectData> }> = ({ projectData }) => {
    const { brandInputs, selectedPersona, selectedSlogan, selectedLogoUrl, logoVariations } = projectData;
    if (!brandInputs || !selectedPersona || !selectedLogoUrl || !logoVariations) return null;

    return (
        <div className="p-10 bg-white text-gray-800 font-sans" style={{ width: '800px' }}>
            <header className="flex justify-between items-center border-b-2 border-gray-200 pb-4">
                <div>
                    <h1 className="text-4xl font-bold text-gray-900">{brandInputs.businessName}</h1>
                    <p className="text-lg text-gray-600 italic">"{selectedSlogan}"</p>
                </div>
                <p className="text-sm text-gray-500">Generated by desain.fun</p>
            </header>

            <section className="mt-8">
                <h2 className="text-2xl font-bold uppercase tracking-wider text-gray-700 mb-4">Logo & Variations</h2>
                <div className="grid grid-cols-2 gap-6 bg-gray-50 p-6 rounded-lg">
                    <div className="text-center">
                        <h3 className="font-semibold mb-2">Logo Utama</h3>
                        <div className="bg-white p-4 rounded shadow-md h-40 flex items-center justify-center"><img src={selectedLogoUrl} alt="Main Logo" className="max-h-full max-w-full" /></div>
                    </div>
                    <div className="text-center">
                        <h3 className="font-semibold mb-2">Monokrom</h3>
                        <div className="bg-white p-4 rounded shadow-md h-40 flex items-center justify-center"><img src={logoVariations.monochrome} alt="Monochrome Logo" className="max-h-full max-w-full" /></div>
                    </div>
                    <div className="text-center">
                        <h3 className="font-semibold mb-2">Versi Tumpuk (Stacked)</h3>
                        <div className="bg-white p-4 rounded shadow-md h-40 flex items-center justify-center"><img src={logoVariations.stacked} alt="Stacked Logo" className="max-h-full max-w-full" /></div>
                    </div>
                    <div className="text-center">
                        <h3 className="font-semibold mb-2">Versi Datar (Horizontal)</h3>
                        <div className="bg-white p-4 rounded shadow-md h-40 flex items-center justify-center"><img src={logoVariations.horizontal} alt="Horizontal Logo" className="max-h-full max-w-full" /></div>
                    </div>
                </div>
            </section>
            
            <section className="mt-8">
                 <h2 className="text-2xl font-bold uppercase tracking-wider text-gray-700 mb-4">Color Palette</h2>
                 <div className="flex gap-4">
                     {selectedPersona.palet_warna_hex.map(hex => (
                         <div key={hex} className="text-center">
                             <div className="w-24 h-24 rounded-lg shadow-md" style={{ backgroundColor: hex }}></div>
                             <p className="mt-2 text-sm font-semibold">{hex}</p>
                         </div>
                     ))}
                 </div>
            </section>
            
            <footer className="mt-10 text-center text-xs text-gray-400 border-t pt-4">
                This brand guide was created using the AI-powered tools at desain.fun.
            </footer>
        </div>
    );
};


const ProjectSummary: React.FC<Props> = (props) => {
  const { project, onStartNew, onGoToCaptionGenerator, onGoToInstantContent, onDeleteProject, onShareToForum } = props;
  const { brandInputs, selectedPersona, selectedSlogan, selectedLogoUrl, logoVariations, contentCalendar, socialMediaKit, socialProfiles, socialAds, selectedPackagingUrl, printMediaAssets, merchandiseUrl } = project.project_data;
  
  const [modalImageUrl, setModalImageUrl] = useState<string | null>(null);
  const [regenerating, setRegenerating] = useState<string | null>(null);
  const [isZipping, setIsZipping] = useState(false);
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);

  const handleRegenerate = async (assetKey: string, regenFunc: () => Promise<void>) => {
    setRegenerating(assetKey);
    try { await regenFunc(); } 
    catch(e) { console.error(`Regeneration failed for ${assetKey}`, e); } 
    finally { setRegenerating(null); }
  };

  const handleDownloadPdf = async () => {
      if (!brandInputs) return;
      setIsGeneratingPdf(true);
      try {
        const { default: jsPDF } = await import('jspdf');
        const { default: html2canvas } = await import('html2canvas');
        
        const pdfContainer = document.createElement('div');
        pdfContainer.style.position = 'fixed';
        pdfContainer.style.left = '-9999px';
        pdfContainer.style.top = '0';
        document.body.appendChild(pdfContainer);

        const root = ReactDOM.createRoot(pdfContainer);
        root.render(<PdfContent projectData={project.project_data} />);
        
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const canvas = await html2canvas(pdfContainer.children[0] as HTMLElement, { scale: 2 });
        const imgData = canvas.toDataURL('image/png');

        const pdf = new jsPDF('p', 'mm', 'a4');
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        const ratio = imgWidth / imgHeight;
        const imgPdfWidth = pdfWidth;
        const imgPdfHeight = imgPdfWidth / ratio;
        
        pdf.addImage(imgData, 'PNG', 0, 0, imgPdfWidth, imgPdfHeight);
        pdf.save(`${brandInputs.businessName.replace(/\s/g, '_')}_brand_guide.pdf`);

        root.unmount();
        document.body.removeChild(pdfContainer);
      } catch (err) {
          console.error("Error generating PDF:", err);
          alert("Waduh, gagal membuat file PDF. Coba lagi ya.");
      } finally {
          setIsGeneratingPdf(false);
      }
  };

  const handleDownloadAll = async () => {
    if (!brandInputs) return;
    setIsZipping(true);
    try {
        const { default: JSZip } = await import('jszip');
        const zip = new JSZip();
        const guideContent = `BRAND GUIDE for: ${brandInputs.businessName}\n=======================================\n\nSlogan:\n"${selectedSlogan}"\n\nPersona: ${selectedPersona.nama_persona}\n${selectedPersona.deskripsi_singkat}\n\nKeywords:\n- ${selectedPersona.kata_kunci.join('\n- ')}\n\nColor Palette:\n${selectedPersona.palet_warna_hex.map(hex => `- ${hex}`).join('\n')}\n\nBrand Voice:\n- Deskripsi: ${selectedPersona.brand_voice.deskripsi}\n- Gunakan: ${selectedPersona.brand_voice.kata_yang_digunakan.join(', ')}\n- Hindari: ${selectedPersona.brand_voice.kata_yang_dihindari.join(', ')}\n\nGenerated by desain.fun`;
        zip.file("brand_guide.txt", guideContent.trim());
        
        const addImageToZip = (folder: typeof zip, filename: string, base64: string | undefined) => {
            if (!base64 || !base64.startsWith('data:image')) return;
            const pureBase64 = base64.split(',')[1];
            const mimeType = base64.match(/data:(.*);base64/)?.[1] || 'image/png';
            let extension = (mimeType.split('/')[1] || 'png').split('+')[0];
            folder.file(`${filename}.${extension}`, pureBase64, { base64: true });
        };
        
        const logoFolder = zip.folder("1_Logo");
        if (logoFolder) {
            addImageToZip(logoFolder, "logo_utama", selectedLogoUrl);
            if (logoVariations) {
                addImageToZip(logoFolder, "logo_tumpuk", logoVariations.stacked);
                addImageToZip(logoFolder, "logo_datar", logoVariations.horizontal);
                addImageToZip(logoFolder, "logo_monokrom", logoVariations.monochrome);
            }
        }

        const sosmedFolder = zip.folder("2_Media_Sosial");
        if (sosmedFolder && socialMediaKit) {
            addImageToZip(sosmedFolder, "foto_profil", socialMediaKit.profilePictureUrl);
            addImageToZip(sosmedFolder, "banner_header", socialMediaKit.bannerUrl);
        }

        const visualFolder = zip.folder("3_Aset_Visual");
        if (visualFolder) {
            addImageToZip(visualFolder, "desain_kemasan", selectedPackagingUrl);
            addImageToZip(visualFolder, "mockup_merchandise", merchandiseUrl);
        }
        
        const cetakFolder = zip.folder("4_Media_Cetak");
        if (cetakFolder && printMediaAssets) {
             addImageToZip(cetakFolder, "template_spanduk", printMediaAssets.bannerUrl);
             addImageToZip(cetakFolder, "template_roll_banner", printMediaAssets.rollBannerUrl);
        }

        const content = await zip.generateAsync({ type: "blob" });
        const url = URL.createObjectURL(content);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${brandInputs.businessName.replace(/\s/g, '_')}_brand_kit.zip`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    } catch (err) {
        console.error("Error creating zip file:", err);
        alert("Waduh, gagal membuat file .zip. Coba lagi ya.");
    } finally {
        setIsZipping(false);
    }
  };

  if (!brandInputs || !selectedPersona) {
    return (
        <div className="text-center">
            <h2 className="text-2xl font-bold text-red-500">Data Project Tidak Lengkap</h2>
            <p className="text-text-muted mt-2">Tidak dapat menampilkan Brand Hub karena data persona atau detail bisnis tidak ditemukan.</p>
            <Button onClick={onStartNew} className="mt-4">Kembali ke Dashboard</Button>
        </div>
    );
  }

  return (
    <>
      <div className="text-center mb-10">
          <h2 className="text-4xl md:text-5xl font-extrabold text-primary mb-2">Kanvas Brand: "{brandInputs.businessName}"</h2>
          <p className="text-text-muted max-w-3xl mx-auto">Selamat! Ini pusat kendali brand lo. Semua asetmu tertata di sini. Aset inti sudah dipatenkan, tapi aset turunan bisa di-generate ulang kapan aja.</p>
      </div>

       <div className="w-full sticky top-[88px] z-10 bg-surface/80 backdrop-blur-md rounded-lg p-3 mb-8 shadow-sm flex flex-wrap gap-3 justify-center items-center border border-border-main">
            <Button onClick={handleDownloadAll} isLoading={isZipping}>Unduh Aset (.zip)</Button>
            <Button onClick={handleDownloadPdf} isLoading={isGeneratingPdf} variant="accent">Unduh Brand Guide (PDF)</Button>
            <Button variant="secondary" onClick={() => onShareToForum(project)}>Pamerin & Minta Masukan</Button>
            <Button onClick={onStartNew}>Buat Project Baru</Button>
            <Button variant="secondary" onClick={() => onDeleteProject(project.id)} className="!border-red-600/50 !text-red-400 hover:!bg-red-900/20">Hapus Project</Button>
        </div>

      <main className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
          <section id="strategi" className="xl:col-span-4">
              <Card title="â­ Strategi Brand (Master)">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="md:col-span-2">
                      <h4 className="text-xl font-bold text-text-header">{brandInputs.businessName}</h4>
                      <p className="text-primary italic mt-1 selectable-text">"{selectedSlogan}"</p>
                      <div className="mt-4 pt-4 border-t border-border-main">
                          <h5 className="font-semibold text-text-header mb-2">Persona: {selectedPersona.nama_persona}</h5>
                          <p className="text-sm text-text-body selectable-text">{selectedPersona.deskripsi_singkat}</p>
                      </div>
                    </div>
                    <div>
                       <h5 className="font-semibold text-text-header mb-2">Palet Warna</h5>
                       <div className="flex items-center gap-3">
                        {selectedPersona.palet_warna_hex.map((hex) => (
                          <div key={hex} className="flex flex-col items-center gap-1">
                            <div className="w-10 h-10 rounded-full border-2 border-border-main" style={{ backgroundColor: hex }}></div>
                            <span className="text-xs text-text-muted selectable-text">{hex}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                </div>
              </Card>
          </section>

          <section id="logo" className="xl:col-span-4">
              <Card title="â­ Paket Logo (Master)">
                  {logoVariations ? (
                     <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                         <div><h5 className="font-semibold text-text-header mb-2 text-sm">Logo Utama</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(selectedLogoUrl)}><img src={selectedLogoUrl} alt="Logo Utama" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                         <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Tumpuk</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.stacked)}><img src={logoVariations.stacked} alt="Logo Tumpuk" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                         <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Datar</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.horizontal)}><img src={logoVariations.horizontal} alt="Logo Datar" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                         <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Monokrom</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.monochrome)}><img src={logoVariations.monochrome} alt="Logo Monokrom" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                     </div>
                  ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>}
              </Card>
          </section>
          
          <section id="sosmed-kit" className="md:col-span-1 xl:col-span-2">
              <Card title="ð¼ï¸ Social Media Kit">
                  {regenerating === 'social_kit' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                      socialMediaKit ? (
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 items-center">
                              <div><h5 className="font-semibold text-text-header mb-2 text-center">Foto Profil</h5><div className="bg-background rounded-full p-2 w-32 h-32 mx-auto flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(socialMediaKit.profilePictureUrl)}><img src={socialMediaKit.profilePictureUrl} alt="Foto Profil" className="max-w-full max-h-full object-contain rounded-full group-hover:scale-105" loading="lazy"/></div></div>
                              <div className="mt-4 sm:mt-0"><h5 className="font-semibold text-text-header mb-2 text-center">Banner Header</h5><div className="bg-background p-2 rounded-lg cursor-pointer group" onClick={() => setModalImageUrl(socialMediaKit.bannerUrl)}><img src={socialMediaKit.bannerUrl} alt="Banner" className="w-full object-contain group-hover:scale-105" loading="lazy"/></div></div>
                          </div>
                      ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                  )}
                  <div className="mt-4 pt-4 border-t border-border-main"><RegenerateButton assetKey="social_kit" isRegenerating={regenerating === 'social_kit'} onRegen={() => handleRegenerate('social_kit', props.onRegenerateSocialKit)} regenText="Membuat..." defaultText={socialMediaKit ? 'Buat Ulang' : 'Buat'} cost={2} /></div>
              </Card>
          </section>

          <section id="profil-sosmed" className="md:col-span-1 xl:col-span-2">
              <Card title="âï¸ Profil & Iklan Sosmed">
                  {regenerating === 'profiles' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                      socialProfiles ? (
                          <div className="space-y-4">
                              <div><h5 className="font-semibold text-text-header mb-2">Bio Instagram</h5><div className="relative bg-background p-3 rounded-lg"><p className="text-sm text-text-body whitespace-pre-wrap pr-10 selectable-text">{socialProfiles.instagramBio}</p><CopyButton textToCopy={socialProfiles.instagramBio} className="absolute top-2 right-2"/></div></div>
                              <div><h5 className="font-semibold text-text-header mb-2">Bio TikTok</h5><div className="relative bg-background p-3 rounded-lg"><p className="text-sm text-text-body whitespace-pre-wrap pr-10 selectable-text">{socialProfiles.tiktokBio}</p><CopyButton textToCopy={socialProfiles.tiktokBio} className="absolute top-2 right-2"/></div></div>
                          </div>
                      ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                  )}
                  <div className="mt-4 pt-4 border-t border-border-main"><RegenerateButton assetKey="profiles" isRegenerating={regenerating === 'profiles'} onRegen={() => handleRegenerate('profiles', props.onRegenerateProfiles)} regenText="Membuat..." defaultText={socialProfiles ? 'Buat Ulang' : 'Buat'} cost={1} /></div>
              </Card>
          </section>

          <section id="kalender-konten" className="md:col-span-2 xl:col-span-4">
               <Card title="ð Kalender Konten Mingguan">
                  {regenerating === 'content' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                      contentCalendar && contentCalendar.length > 0 ? (
                          <div className="flex flex-col gap-4 max-h-[400px] overflow-y-auto pr-2">
                              {contentCalendar.map((item, index) => (<div key={index} className="border-b border-border-light pb-3 last:border-b-0 text-sm"><h5 className="font-bold text-text-header">{item.hari} - <span className="text-primary">{item.tipe_konten}</span></h5><p className="text-xs text-text-muted mt-1 selectable-text">{item.ide_konten}</p><div className="relative"><p className="text-text-body whitespace-pre-wrap mt-2 text-xs pr-10 selectable-text">{item.draf_caption}</p><CopyButton textToCopy={item.draf_caption} className="absolute top-2 right-0"/></div></div>))}
                          </div>
                      ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                  )}
                   <div className="mt-4 pt-4 border-t border-border-main"><RegenerateButton assetKey="content" isRegenerating={regenerating === 'content'} onRegen={() => handleRegenerate('content', props.onRegenerateContentCalendar)} regenText="Membuat..." defaultText={contentCalendar ? 'Buat Ulang' : 'Buat'} cost={1} /></div>
                </Card>
          </section>

          <section id="visual-konten" className="md:col-span-2 xl:col-span-4">
            <Card title="ð¨ Mockup & Aset Visual">
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
                  <div><h5 className="font-semibold text-text-header mb-2 text-sm">Foto Produk</h5>{regenerating === 'packaging' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : selectedPackagingUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(selectedPackagingUrl)}><img src={selectedPackagingUrl} alt="Desain Kemasan" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<div className="aspect-square bg-background rounded-lg flex items-center justify-center"><p className="text-sm text-text-muted italic p-4 text-center">Belum dibuat</p></div>)}<div className="mt-4"><RegenerateButton assetKey="packaging" isRegenerating={regenerating === 'packaging'} onRegen={() => handleRegenerate('packaging', props.onRegeneratePackaging)} regenText="Membuat..." defaultText={selectedPackagingUrl ? 'Ulang' : 'Buat'} cost={1} /></div></div>
                  <div><h5 className="font-semibold text-text-header mb-2 text-sm">Merchandise</h5>{regenerating === 'merchandise' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : merchandiseUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(merchandiseUrl)}><img src={merchandiseUrl} alt="Mockup Merchandise" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<div className="aspect-square bg-background rounded-lg flex items-center justify-center"><p className="text-sm text-text-muted italic p-4 text-center">Belum dibuat</p></div>)}<div className="mt-4"><RegenerateButton assetKey="merchandise" isRegenerating={regenerating === 'merchandise'} onRegen={() => handleRegenerate('merchandise', props.onRegenerateMerchandise)} regenText="Membuat..." defaultText={merchandiseUrl ? 'Ulang' : 'Buat'} cost={1} /></div></div>
                  <div><h5 className="font-semibold text-text-header mb-2 text-sm">Media Cetak</h5><div className="space-y-4">{regenerating === 'banner' ? <div className="h-20 flex items-center justify-center"><LoadingMessage/></div> : printMediaAssets?.bannerUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(printMediaAssets.bannerUrl!)}><img src={printMediaAssets.bannerUrl} alt="Template Spanduk" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<div className="aspect-[3/1] bg-background rounded-lg flex items-center justify-center"><p className="text-xs text-text-muted italic p-2 text-center">Spanduk</p></div>)}<div className="mt-2"><RegenerateButton assetKey="banner" isRegenerating={regenerating === 'banner'} onRegen={() => handleRegenerate('banner', () => props.onRegeneratePrintMedia('banner'))} regenText="Membuat..." defaultText={printMediaAssets?.bannerUrl ? 'Ulang' : 'Buat'} cost={1} /></div>{regenerating === 'roll_banner' ? <div className="h-40 flex items-center justify-center"><LoadingMessage/></div> : printMediaAssets?.rollBannerUrl ? (<div className="cursor-pointer group flex justify-center" onClick={() => setModalImageUrl(printMediaAssets.rollBannerUrl!)}><img src={printMediaAssets.rollBannerUrl} alt="Template Roll Banner" className="h-40 object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<div className="aspect-[9/16] h-40 mx-auto bg-background rounded-lg flex items-center justify-center"><p className="text-xs text-text-muted italic p-2 text-center">Roll Up</p></div>)}<div className="mt-2"><RegenerateButton assetKey="roll_banner" isRegenerating={regenerating === 'roll_banner'} onRegen={() => handleRegenerate('roll_banner', () => props.onRegeneratePrintMedia('roll_banner'))} regenText="Membuat..." defaultText={printMediaAssets?.rollBannerUrl ? 'Ulang' : 'Buat'} cost={1} /></div></div></div>
              </div>
            </Card>
          </section>

          <section id="tools" className="md:col-span-2 xl:col-span-4">
              <Card title="ð ï¸ Tools Lanjutan">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                          <h4 className="font-semibold text-text-header">Generator Caption Sosmed (+10 XP)</h4>
                          <p className="text-sm text-text-body my-2">Butuh caption dadakan? Cukup kasih topiknya, Mang AI akan meracik 3 pilihan caption yang sesuai persona brand lo.</p>
                          <Button size="small" variant="secondary" onClick={() => onGoToCaptionGenerator(project.id)}>Buka Generator Caption</Button>
                      </div>
                      <div className="pt-4 border-t border-border-main md:border-t-0 md:pt-0 md:pl-6 md:border-l">
                          <h4 className="font-semibold text-text-header">Generator Konten Instan (+75 XP)</h4>
                          <p className="text-sm text-text-body my-2">Ubah 1 ide jadi 1 paket konten (1 gambar + 3 caption) siap posting dalam sekejap!</p>
                          <Button size="small" variant="secondary" onClick={() => onGoToInstantContent(project.id)}>Buka Konten Instan</Button>
                      </div>
                  </div>
              </Card>
          </section>
      </main>

      {modalImageUrl && (<ImageModal imageUrl={modalImageUrl} altText={`Aset untuk ${brandInputs.businessName}`} onClose={() => setModalImageUrl(null)} />)}
    </>
  );
};

export default ProjectSummary;