// ¬© 2024 Atharrazka Core by Rangga.P.H. All Rights Reserved.

import React, { useState } from 'react';
import type { Project } from '../types';
import Button from './common/Button';
import Card from './common/Card';
import ImageModal from './common/ImageModal';
import CopyButton from './common/CopyButton';
import LoadingMessage from './common/LoadingMessage';

interface Props {
  project: Project;
  onStartNew: () => void;
  onGoToCaptionGenerator: (projectId: number) => void;
  onGoToInstantContent: (projectId: number) => void;
  onDeleteProject: (projectId: number) => void;
  onRegenerateContentCalendar: () => Promise<void>;
  onRegenerateSocialKit: () => Promise<void>;
  onRegenerateProfiles: () => Promise<void>;
  onRegenerateSocialAds: () => Promise<void>;
  onRegeneratePackaging: () => Promise<void>;
  onRegeneratePrintMedia: (mediaType: 'banner' | 'roll_banner') => Promise<void>;
  onRegenerateMerchandise: () => Promise<void>;
  addXp: (amount: number) => Promise<void>;
  onShareToForum: (project: Project) => void;
}

const BrandHubSidebar: React.FC = () => {
    const navItems = [
        { id: 'strategi', name: 'Strategi Brand', icon: '‚≠ê' },
        { id: 'logo', name: 'Paket Logo', icon: '‚≠ê' },
        { id: 'sosmed-kit', name: 'Social Media Kit', icon: 'üñºÔ∏è' },
        { id: 'profil-sosmed', name: 'Profil & Iklan Sosmed', icon: '‚úçÔ∏è' },
        { id: 'kalender-konten', name: 'Kalender Konten', icon: 'üìÖ' },
        { id: 'visual-konten', name: 'Aset Visual Lain', icon: 'üé®' },
        { id: 'tools', name: 'Tools Lanjutan', icon: 'üõ†Ô∏è' },
    ];
    return (
        <aside className="w-full lg:w-1/4 xl:w-1/5">
            <div className="sticky top-28 p-4 bg-surface rounded-lg border border-border-main shadow-sm">
                <h3 className="text-lg font-bold text-text-header mb-4">Navigasi Brand Hub</h3>
                <nav>
                    <ul className="space-y-2">
                        {navItems.map(item => (
                            <li key={item.id}>
                                <a href={`#${item.id}`} className="flex items-center gap-3 px-3 py-2 text-sm text-text-body rounded-md hover:bg-background hover:text-text-header transition-colors">
                                    <span>{item.icon}</span>
                                    <span>{item.name}</span>
                                </a>
                            </li>
                        ))}
                    </ul>
                </nav>
            </div>
        </aside>
    )
}

const ProjectSummary: React.FC<Props> = (props) => {
  const { project, onStartNew, onGoToCaptionGenerator, onGoToInstantContent, onDeleteProject, onShareToForum } = props;
  const { brandInputs, selectedPersona, selectedSlogan, selectedLogoUrl, logoVariations, contentCalendar, socialMediaKit, socialProfiles, socialAds, selectedPackagingUrl, printMediaAssets, merchandiseUrl } = project.project_data;
  
  const [modalImageUrl, setModalImageUrl] = useState<string | null>(null);
  const [regenerating, setRegenerating] = useState<string | null>(null);
  const [isZipping, setIsZipping] = useState(false);

  const handleRegenerate = async (assetKey: string, regenFunc: () => Promise<void>) => {
    setRegenerating(assetKey);
    try { await regenFunc(); } 
    catch(e) { console.error(`Regeneration failed for ${assetKey}`, e); } 
    finally { setRegenerating(null); }
  };

  const handleDownloadAll = async () => {
    setIsZipping(true);
    try {
        const { default: JSZip } = await import('jszip');
        const zip = new JSZip();
        const guideContent = `BRAND GUIDE for: ${brandInputs.businessName}\n=======================================\n\nSlogan:\n"${selectedSlogan}"\n\nPersona: ${selectedPersona.nama_persona}\n${selectedPersona.deskripsi_singkat}\n\nKeywords:\n- ${selectedPersona.kata_kunci.join('\n- ')}\n\nColor Palette:\n${selectedPersona.palet_warna_hex.map(hex => `- ${hex}`).join('\n')}\n\nBrand Voice:\n- Deskripsi: ${selectedPersona.brand_voice.deskripsi}\n- Gunakan: ${selectedPersona.brand_voice.kata_yang_digunakan.join(', ')}\n- Hindari: ${selectedPersona.brand_voice.kata_yang_dihindari.join(', ')}\n\nGenerated by desain.fun`;
        zip.file("brand_guide.txt", guideContent.trim());
        
        // FIX: 'JSZip' is a value from the dynamic import, not a type. Use `typeof zip` to get the instance type for the 'folder' parameter.
        const addImageToZip = (folder: typeof zip, filename: string, base64: string | undefined) => {
            if (!base64 || !base64.startsWith('data:image')) return;
            const pureBase64 = base64.split(',')[1];
            const mimeType = base64.match(/data:(.*);base64/)?.[1] || 'image/png';
            let extension = (mimeType.split('/')[1] || 'png').split('+')[0];
            folder.file(`${filename}.${extension}`, pureBase64, { base64: true });
        };
        
        const logoFolder = zip.folder("1_Logo");
        if (logoFolder) {
            addImageToZip(logoFolder, "logo_utama", selectedLogoUrl);
            if (logoVariations) {
                addImageToZip(logoFolder, "logo_tumpuk", logoVariations.stacked);
                addImageToZip(logoFolder, "logo_datar", logoVariations.horizontal);
                addImageToZip(logoFolder, "logo_monokrom", logoVariations.monochrome);
            }
        }

        const sosmedFolder = zip.folder("2_Media_Sosial");
        if (sosmedFolder && socialMediaKit) {
            addImageToZip(sosmedFolder, "foto_profil", socialMediaKit.profilePictureUrl);
            addImageToZip(sosmedFolder, "banner_header", socialMediaKit.bannerUrl);
        }

        const visualFolder = zip.folder("3_Aset_Visual");
        if (visualFolder) {
            addImageToZip(visualFolder, "desain_kemasan", selectedPackagingUrl);
            addImageToZip(visualFolder, "mockup_merchandise", merchandiseUrl);
        }
        
        const cetakFolder = zip.folder("4_Media_Cetak");
        if (cetakFolder && printMediaAssets) {
             addImageToZip(cetakFolder, "template_spanduk", printMediaAssets.bannerUrl);
             addImageToZip(cetakFolder, "template_roll_banner", printMediaAssets.rollBannerUrl);
        }

        const content = await zip.generateAsync({ type: "blob" });
        const url = URL.createObjectURL(content);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${brandInputs.businessName.replace(/\s/g, '_')}_brand_kit.zip`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    } catch (err) {
        console.error("Error creating zip file:", err);
        alert("Waduh, gagal membuat file .zip. Coba lagi ya.");
    } finally {
        setIsZipping(false);
    }
  };

  return (
    <>
      <div className="text-center mb-10">
          <h2 className="text-4xl md:text-5xl font-extrabold text-primary mb-2">Brand Hub: "{brandInputs.businessName}"</h2>
          <p className="text-text-muted max-w-3xl mx-auto">Selamat! Ini pusat kendali brand lo. Aset inti (Strategi & Logo) sudah dipatenkan. Lo bisa generate ulang aset turunan kapan aja.</p>
      </div>

       <div className="w-full max-w-4xl mx-auto flex flex-col items-center justify-center gap-4 bg-surface border border-border-main rounded-lg p-6 mb-8 shadow-sm text-center">
            <h4 className="font-bold text-lg text-text-header">Amankan Karyamu!</h4>
            <p className="text-sm text-text-muted max-w-lg">Ini adalah pusat kendali brand-mu. Data teks tersimpan permanen, tapi aset visual (gambar) hanya sementara. <strong className="text-splash">Segera unduh semua asetmu dalam format .zip untuk disimpan selamanya!</strong></p>
            <Button onClick={handleDownloadAll} isLoading={isZipping} variant="accent" className="mt-2">Unduh Semua Aset (.zip)</Button>
        </div>

      <div className="flex flex-col lg:flex-row gap-8 items-start">
        <BrandHubSidebar />
        <main className="w-full lg:flex-1 grid grid-cols-1 md:grid-cols-2 gap-8">
            <section id="strategi" className="md:col-span-2">
                <Card title="‚≠ê Strategi Brand (Master)">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                      <div>
                        <h4 className="text-xl font-bold text-text-header">{brandInputs.businessName}</h4>
                        <p className="text-primary italic mt-1 selectable-text">"{selectedSlogan}"</p>
                        <div className="mt-4 pt-4 border-t border-border-main">
                            <h5 className="font-semibold text-text-header mb-2">Persona: {selectedPersona.nama_persona}</h5>
                            <p className="text-sm text-text-body selectable-text">{selectedPersona.deskripsi_singkat}</p>
                        </div>
                      </div>
                      <div>
                         <h5 className="font-semibold text-text-header mb-2">Palet Warna</h5>
                         <div className="flex items-center gap-3">
                          {selectedPersona.palet_warna_hex.map((hex) => (
                            <div key={hex} className="flex flex-col items-center gap-1">
                              <div className="w-10 h-10 rounded-full border-2 border-border-main" style={{ backgroundColor: hex }}></div>
                              <span className="text-xs text-text-muted selectable-text">{hex}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                  </div>
                </Card>
            </section>

            <section id="logo" className="md:col-span-2">
                <Card title="‚≠ê Paket Logo (Master)">
                    {logoVariations ? (
                       <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                           <div><h5 className="font-semibold text-text-header mb-2 text-sm">Logo Utama</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(selectedLogoUrl)}><img src={selectedLogoUrl} alt="Logo Utama" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                           <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Tumpuk</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.stacked)}><img src={logoVariations.stacked} alt="Logo Tumpuk" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                           <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Datar</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.horizontal)}><img src={logoVariations.horizontal} alt="Logo Datar" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                           <div><h5 className="font-semibold text-text-header mb-2 text-sm">Versi Monokrom</h5><div className="bg-background p-2 rounded-lg aspect-square flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(logoVariations.monochrome)}><img src={logoVariations.monochrome} alt="Logo Monokrom" className="max-w-full max-h-24 object-contain group-hover:scale-105" loading="lazy"/></div></div>
                       </div>
                    ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>}
                </Card>
            </section>
            
            <section id="sosmed-kit">
                <Card title="üñºÔ∏è Social Media Kit">
                    {regenerating === 'social_kit' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                        socialMediaKit ? (
                            <div className="space-y-4">
                                <div><h5 className="font-semibold text-text-header mb-2">Foto Profil</h5><div className="bg-background rounded-full p-2 w-32 h-32 mx-auto flex justify-center items-center cursor-pointer group" onClick={() => setModalImageUrl(socialMediaKit.profilePictureUrl)}><img src={socialMediaKit.profilePictureUrl} alt="Foto Profil" className="max-w-full max-h-full object-contain rounded-full group-hover:scale-105" loading="lazy"/></div></div>
                                <div><h5 className="font-semibold text-text-header mb-2">Banner Header</h5><div className="bg-background p-2 rounded-lg cursor-pointer group" onClick={() => setModalImageUrl(socialMediaKit.bannerUrl)}><img src={socialMediaKit.bannerUrl} alt="Banner" className="w-full object-contain group-hover:scale-105" loading="lazy"/></div></div>
                            </div>
                        ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                    )}
                    <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('social_kit', props.onRegenerateSocialKit)} isLoading={regenerating === 'social_kit'}>{socialMediaKit ? 'Generate Ulang (2 Token)' : 'Generate (2 Token)'}</Button></div>
                </Card>
            </section>

            <section id="profil-sosmed">
                <div className="flex flex-col gap-8">
                    <Card title="‚úçÔ∏è Profil & Iklan Sosmed">
                        {regenerating === 'profiles' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                            socialProfiles ? (
                                <div className="space-y-4">
                                    <div><h5 className="font-semibold text-text-header mb-2">Bio Instagram</h5><div className="relative bg-background p-3 rounded-lg"><p className="text-sm text-text-body whitespace-pre-wrap pr-10 selectable-text">{socialProfiles.instagramBio}</p><CopyButton textToCopy={socialProfiles.instagramBio} className="absolute top-2 right-2"/></div></div>
                                    <div><h5 className="font-semibold text-text-header mb-2">Bio TikTok</h5><div className="relative bg-background p-3 rounded-lg"><p className="text-sm text-text-body whitespace-pre-wrap pr-10 selectable-text">{socialProfiles.tiktokBio}</p><CopyButton textToCopy={socialProfiles.tiktokBio} className="absolute top-2 right-2"/></div></div>
                                </div>
                            ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                        )}
                        <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('profiles', props.onRegenerateProfiles)} isLoading={regenerating === 'profiles'}>{socialProfiles ? 'Generate Ulang (1 Token)' : 'Generate (1 Token)'}</Button></div>
                        {regenerating === 'social_ads' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                            socialAds && socialAds.length > 0 ? (
                                <div className="space-y-4 max-h-64 overflow-auto mt-4 pt-4 border-t border-border-main">
                                    {socialAds.map((ad, index) => (<div key={index} className="border-b border-border-light pb-3 last:border-b-0 last:pb-0"><h5 className="font-semibold text-text-header mb-2">Iklan {ad.platform}</h5><div className="relative bg-background p-3 rounded-lg"><p className="text-sm text-text-body whitespace-pre-wrap pr-10 selectable-text">{ad.adCopy}</p><CopyButton textToCopy={ad.adCopy} className="absolute top-2 right-2"/></div></div>))}
                                </div>
                            ) : <p className="text-sm text-text-muted italic mt-4 pt-4 border-t border-border-main">Teks iklan belum dibuat.</p>
                        )}
                         <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('social_ads', props.onRegenerateSocialAds)} isLoading={regenerating === 'social_ads'}>{socialAds ? 'Generate Ulang (1 Token)' : 'Generate (1 Token)'}</Button></div>
                    </Card>
                </div>
            </section>
            
            <section id="kalender-konten" className="md:col-span-2">
                 <Card title="üìÖ Kalender Konten Mingguan">
                    {regenerating === 'content' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : (
                        contentCalendar && contentCalendar.length > 0 ? (
                            <div className="flex flex-col gap-4 max-h-[600px] overflow-y-auto">
                                {contentCalendar.map((item, index) => (<div key={index} className="border-b border-border-light pb-3 last:border-b-0 text-sm"><h5 className="font-bold text-text-header">{item.hari} - <span className="text-primary">{item.tipe_konten}</span></h5><p className="text-xs text-text-muted mt-1 selectable-text">{item.ide_konten}</p><div className="relative"><p className="text-text-body whitespace-pre-wrap mt-2 text-xs pr-10 selectable-text">{item.draf_caption}</p><CopyButton textToCopy={item.draf_caption} className="absolute top-2 right-0"/></div></div>))}
                            </div>
                        ) : <p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>
                    )}
                     <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('content', props.onRegenerateContentCalendar)} isLoading={regenerating === 'content'}>{contentCalendar ? 'Generate Ulang (1 Token)' : 'Generate (1 Token)'}</Button></div>
                  </Card>
            </section>

            <section id="visual-konten" className="md:col-span-2">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-8">
                    <Card title="üé® Foto Produk & Kemasan">
                        {regenerating === 'packaging' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : selectedPackagingUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(selectedPackagingUrl)}><img src={selectedPackagingUrl} alt="Desain Kemasan" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>)}
                        <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('packaging', props.onRegeneratePackaging)} isLoading={regenerating === 'packaging'}>{selectedPackagingUrl ? 'Generate Ulang (1 Token)' : 'Generate (1 Token)'}</Button></div>
                    </Card>

                    <Card title="üé® Mockup Merchandise">
                        {regenerating === 'merchandise' ? <div className="h-48 flex items-center justify-center"><LoadingMessage/></div> : merchandiseUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(merchandiseUrl)}><img src={merchandiseUrl} alt="Mockup Merchandise" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<p className="text-sm text-text-muted italic">Aset ini belum dibuat.</p>)}
                        <div className="mt-4 pt-4 border-t border-border-main"><Button size="small" variant="secondary" onClick={() => handleRegenerate('merchandise', props.onRegenerateMerchandise)} isLoading={regenerating === 'merchandise'}>{merchandiseUrl ? 'Generate Ulang (1 Token)' : 'Generate (1 Token)'}</Button></div>
                    </Card>

                     <div className="md:col-span-2">
                        <Card title="üé® Template Media Cetak">
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <h5 className="font-semibold text-text-header mb-2 text-sm">Spanduk (Horizontal)</h5>
                                    {regenerating === 'banner' ? <div className="h-20 flex items-center justify-center"><LoadingMessage/></div> : printMediaAssets?.bannerUrl ? (<div className="cursor-pointer group" onClick={() => setModalImageUrl(printMediaAssets.bannerUrl!)}><img src={printMediaAssets.bannerUrl} alt="Template Spanduk" className="w-full object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<p className="text-xs text-text-muted italic">Belum dibuat.</p>)}
                                    <div className="mt-2"><Button size="small" variant="secondary" onClick={() => handleRegenerate('banner', () => props.onRegeneratePrintMedia('banner'))} isLoading={regenerating === 'banner'}>{printMediaAssets?.bannerUrl ? 'Ulang (1 Token)' : 'Buat (1 Token)'}</Button></div>
                                </div>
                                <div className="pt-4 border-t border-border-main sm:border-t-0 sm:pt-0">
                                    <h5 className="font-semibold text-text-header mb-2 text-sm">Roll Banner (Vertikal)</h5>
                                    {regenerating === 'roll_banner' ? <div className="h-40 flex items-center justify-center"><LoadingMessage/></div> : printMediaAssets?.rollBannerUrl ? (<div className="cursor-pointer group flex justify-center" onClick={() => setModalImageUrl(printMediaAssets.rollBannerUrl!)}><img src={printMediaAssets.rollBannerUrl} alt="Template Roll Banner" className="h-40 object-contain rounded-lg group-hover:scale-105 transition-transform" loading="lazy" /></div>) : (<p className="text-xs text-text-muted italic">Belum dibuat.</p>)}
                                    <div className="mt-2"><Button size="small" variant="secondary" onClick={() => handleRegenerate('roll_banner', () => props.onRegeneratePrintMedia('roll_banner'))} isLoading={regenerating === 'roll_banner'}>{printMediaAssets?.rollBannerUrl ? 'Ulang (1 Token)' : 'Buat (1 Token)'}</Button></div>
                                </div>
                            </div>
                        </Card>
                    </div>
                </div>
            </section>
            
            <section id="tools" className="md:col-span-2">
                <Card title="üõ†Ô∏è Tools Lanjutan">
                    <div className="space-y-4">
                        <div>
                            <h4 className="font-semibold text-text-header">Generator Caption Sosmed (+10 XP)</h4>
                            <p className="text-sm text-text-body my-2">Butuh caption dadakan? Cukup kasih topiknya, Mang AI akan meracik 3 pilihan caption yang sesuai persona brand lo.</p>
                            <Button size="small" variant="secondary" onClick={() => onGoToCaptionGenerator(project.id)}>Buka Generator Caption</Button>
                        </div>
                        <div className="pt-4 border-t border-border-main">
                            <h4 className="font-semibold text-text-header">Generator Konten Instan (+75 XP)</h4>
                            <p className="text-sm text-text-body my-2">Ubah 1 ide jadi 1 paket konten (1 gambar + 3 caption) siap posting dalam sekejap!</p>
                            <Button size="small" variant="secondary" onClick={() => onGoToInstantContent(project.id)}>Buka Konten Instan</Button>
                        </div>
                    </div>
                </Card>
            </section>

             <section className="md:col-span-2">
                <Card title="üöÄ Aksi Selanjutnya">
                    <div className="flex flex-wrap gap-4 items-center">
                        <Button onClick={onStartNew}>Buat Project Baru</Button>
                        <Button variant="secondary" onClick={() => onShareToForum(project)}>Pamerin & Minta Masukan</Button>
                        <Button variant="secondary" onClick={() => onDeleteProject(project.id)} className="!border-red-600/50 !text-red-400 hover:!bg-red-900/20">Hapus Project Ini</Button>
                    </div>
                </Card>
            </section>
        </main>
      </div>

      {modalImageUrl && (<ImageModal imageUrl={modalImageUrl} altText={`Aset untuk ${brandInputs.businessName}`} onClose={() => setModalImageUrl(null)} />)}
    </>
  );
};

export default ProjectSummary;
